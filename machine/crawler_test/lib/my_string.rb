# Stringクラスにいろいろ拡張(エスケープとか)
class String
  # フィルタリングテーブル
  FILTERING_TABLE = {
    # ゜゛カタカナ
    'ハ゜'  => 'パ',
    'ヒ゜'  => 'ピ',
    'フ゜'  => 'プ',
    'ヘ゜'  => 'ペ',
    'ホ゜'  => 'ポ',
    'カ゛'  => 'ガ',
    'キ゛'  => 'ギ',
    'ク゛'  => 'グ',
    'ケ゛'  => 'ゲ',
    'コ゛'  => 'ゴ',
    'サ゛'  => 'ザ',
    'シ゛'  => 'ジ',
    'ズ゛'  => 'ズ',
    'ゼ゛'  => 'ゼ',
    'ゾ゛'  => 'ゾ',
    'タ゛'  => 'ダ',
    'チ゛'  => 'ヂ',
    'ツ゛'  => 'ヅ',
    'テ゛'  => 'デ',
    'ト゛'  => 'ド',
    'ハ゛'  => 'バ',
    'ヒ゛'  => 'ビ',
    'フ゛'  => 'ブ',
    'ヘ゛'  => 'ベ',
    'ホ゛'  => 'ボ',
    'ウ゛'  => 'ヴ',

    # 丸数字 => (数字)
  	'①' => '(1)',
  	'②' => '(2)',
  	'③' => '(3)',
  	'④' => '(4)',
  	'⑤' => '(5)',
  	'⑥' => '(6)',
  	'⑦' => '(7)',
  	'⑧' => '(8)',
  	'⑨' => '(9)',
  	'⑩' => '(10)',
  	'⑪' => '(11)',
  	'⑫' => '(12)',
  	'⑬' => '(13)',
  	'⑭' => '(14)',
  	'⑮' => '(15)',
  	'⑯' => '(16)',
  	'⑰' => '(17)',
  	'⑱' => '(18)',
  	'⑲' => '(19)',
  	'⑳' => '(20)',
    
  	# ローマ数字
  	'Ⅰ' => 'I',
  	'Ⅱ' => 'II',
  	'Ⅲ' => 'III',
  	'Ⅳ' => 'IV',
  	'Ⅴ' => 'V',
  	'Ⅵ' => 'VI',
  	'Ⅶ' => 'VII',
  	'Ⅷ' => 'VIII',
  	'Ⅸ' => 'IX',
  	'Ⅹ' => 'X',
  	'ⅰ' => 'i',
  	'ⅱ' => 'ii',
  	'ⅲ' => 'iii',
  	'ⅳ' => 'iv',
  	'ⅴ' => 'v',
  	'ⅵ' => 'vi',
  	'ⅶ' => 'vii',
  	'ⅷ' => 'viii',
  	'ⅸ' => 'ix',
  	'ⅹ' => 'x',
    
    # そのほか
  	'㎜'            => 'mm',
  	'㎝'            => 'cm',
  	'㎞'            => 'km',
  	'№'            => 'No.',
  	'\xE3\x80\x9C'  => '～'
  }
    
  # その他全角用フィルタ
  ZENKAKU_FILTER = {
    # 株式会社、有限会社の削除
    /㈱|㈲|株式会社|有限会社|\(有\)|\(株\)/ => "",
    
    # -
  	/－|―|‐|\xE2\x88\x92|\xE2\x80\x94/ => '-',
  	/^ー$/  => '-',
  }

  #
  # 標準統一フィルタリング処理メソッド
  #
  # @access    public
  # @resturn   String フィルタリング処理後の文字列
  #
  def f
  	# 両端空白削除
    temp = self.gsub(/(　|&nbsp;|\302\240)+/, ' ')
  	temp.strip!

    # 半角 -> 全角処理（一部半角 -> 全角変換）
    temp.tr!("Ａ-Ｚａ-ｚ０-９（）＿－%","A-Za-z0-9()_-％")
    
    # 半角のみでなければ、さらにフィルタリング
    unless /^[ -~｡-ﾟ]*$/ =~ self
      temp.gsub!(/[カ-トウ]゛|[ハ-ホ][゜゛]|[①-⑳Ⅰ-Ⅹⅰ-ⅹ㎜-㎞№]|\xE3\x80\x9C/, FILTERING_TABLE)
      ZENKAKU_FILTER.each do |key, val|
        temp.gsub!(key, val)
      end
    end

    # URL問題のある文字を事前にエンコード
    temp.gsub!('\\', '￥')
    # temp.gsub!('&', '%26')

    # スペースを詰める
    return temp.gsub(/\s+/, ' ')
  end
  
  # 文字列除去
  # 
  # @access  public
  # @param   String str  除去する文字列
  # @resturn str除去後の文字列
  #
  def drop(str)
    self.gsub(%r|#{str}|, '')
  end
  
  # ベースURLと結合して、絶対パスを作成する
  # 
  # @access  public
  # @param   String url 結合するベースURL文字列
  # @resturn String     絶対パスURL
  def uf(uri)
    return URI.join(uri.to_s, self.to_s.f).to_s
  end
  
  
  #######################################################
  ##### URLの統一エスケープ url_escape
  #######################################################
  def url_escape
    #HTMLタグ除去
    temp = self.gsub(%r|<.*?>|, " ")
    temp.strip!
    # 空白⇒%20
    temp.gsub!(" ","%20")
	
    return temp
  end
  
  #######################################################
  ##### 追加：
  ##### 指定区切り文字str(指定なしでスペース)までの文字列をとりだす cut_first
  #######################################################
  def cut_first(str = "")
    if str == ""
      str = "\s|　"
    end
    temp = self
    temp = /^(.*?)(#{str})/ =~ temp ? $1 : temp
  end
  
  #######################################################
  ##### 追加：
  ##### 指定区切り文字str(指定なしでスペース)以降の文字列をとりだす cut_other
  #######################################################
  def cut_other(str = "")
    if str == ""
      str = "\s|　"
    end
    temp = self
    temp = /^(.*?)(#{str})(.*)$/ =~ temp ? $3 : ""
  end
  
  #######################################################
  ##### 追加：
  ##### 指定区切り文字str(指定なしでスペース)で区切った一番最後の文字列をとりだす cut_last
  #######################################################
  def cut_last(str = "")
    if str == ""
      str = "\s|　"
    end
    temp = self
    temp = /^(.*)(#{str})(.*?)$/ =~ temp ? $3 : ""
  end
  
  #######################################################
  ##### 空白文字列除去 drop_space
  #######################################################
  def drop_space
    temp = self.gsub(/(\s|　)/, "")
  end
end
