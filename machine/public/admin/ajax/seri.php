<?php/** * 企業間売り切り用をAJAX処理 * * @access public * @author 川端洋平 * @version 0.0.1 * @since 2017/02/27 *///// 設定ファイル読み込み ////require_once '../../../lib-machine.php';try {    //// 認証 ////    Auth::isAuth('member');    $boModel = new BidOpen();    $bmModel = new BidMachine();    $sbModel = new SeriBid();    $res = '';    if ($_SERVER["REQUEST_METHOD"] == "POST") {        $action = Req::post('action');        $target = Req::post('target');        $d      = Req::post('data');        if ($action == "bid") {            echo $sbModel->set($d, $_user['company_id']);        } else if ($action == "set_seri_price") {            $bmModel->setSeriPrice($d['bid_machine_id'], $d['seri_price'], $_user['company_id']);            echo 'success';        }  else if ($action == "prompt") {            $bmModel->setPrompt($d['bid_machine_id'], $_user['company_id']);            echo 'success';        } else {            throw new Exception('処理がありません');        }    } else {        $action = Req::query('action');        $target = Req::query('target');        $d      = Req::query('data');        if ($action == 'getResult') {            //// 入札会情報を取得 ////            $bidOpen = $boModel->get($d['bidOpenId']);            if (strtotime($bidOpen["seri_start_date"]) <= time() && strtotime($bidOpen["seri_end_date"]) > time()) {                //// 出品商品情報一覧を取得 ////                $bmModel = new BidMachine();                $q = array('bid_open_id' => $d['bidOpenId'], 'company_id' => $_user['company_id'], 'is_seri' => true);                $bidMachineList = $bmModel->getList($q);                //// 企業間売り切り入札取得 ////                $resultListAsKey = $bmModel->getSeriResultListAsKey($d['bidOpenId']);                $res = array();                foreach($bidMachineList as $key => $m) {                    if (!empty($resultListAsKey[$m['id']]['amount'])) {                        $r = $resultListAsKey[$m['id']];                        // 落札結果の格納                        $temp = array();                        $temp['id']              = $m['id'];                        $temp['seri_count']      = $r['count'];                        $temp['seri_company']    = $r['company'];                        $temp['seri_company_id'] = $r['company_id'];                        $temp['seri_amount']     = $r['amount'];                        if (($m['seri_price'] <=  $r['amount']) || !empty($m['prompt'])) {                            $temp["seri_result"] = true;                        } else {                            $temp["seri_result"] = false;                        }                        $res[] = $temp;                    }                }            } else {                $res = "notrealtime";            }        } else if ($action == 'getResultList') {            //// 入札会情報を取得 ////            $bidOpen = $boModel->get($d['bidOpenId']);            if (strtotime($bidOpen["seri_start_date"]) <= time() && strtotime($bidOpen["seri_end_date"]) > time()) {                //// 出品商品情報一覧を取得 ////                $bmModel = new BidMachine();                $q = array('bid_open_id' => $d['bidOpenId'], 'is_seri' => true);                $bidMachineList = $bmModel->getList($q);                //// 企業間売り切り入札取得 ////                $resultListAsKey = $bmModel->getSeriResultListAsKey($d['bidOpenId']);                $res = array();                foreach($bidMachineList as $key => $m) {                    if (!empty($resultListAsKey[$m['id']]['amount'])) {                        $r = $resultListAsKey[$m['id']];                        // 落札結果の格納                        $temp = array();                        $temp['id']              = $m['id'];                        $temp['seri_count']      = $r['count'];                        if (($m['seri_price'] <=  $r['amount']) || !empty($m['prompt'])) {                            $temp["seri_result"] = true;                            $temp['my_bidoff'] = $_user['company_id'] == $r['company_id'] ? true : false;                        } else {                            $temp["seri_result"] = false;                            $temp['seri_amount']     = $r['amount'];                        }                        $res[] = $temp;                    }                }            } else {                $res = "notrealtime";            }        } else {            throw new Exception('処理がありません');        }        echo json_encode($res);    }} catch (Exception $e) {    echo $e->getMessage();}